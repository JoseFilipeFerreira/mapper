#!/bin/python
"""create a map with all the places of the photos in a folder"""

import json
import os
import sys
from typing import Generator, Iterable, Tuple

import matplotlib.pyplot as plt
from cartopy import crs, feature
from PIL import Image
from PIL.ExifTags import GPSTAGS, IFD


def hex_to_rgb(value: str) -> Tuple[float, float, float]:
    """convert hex colors to rgb"""
    value = value.lstrip('#')
    length = len(value)
    return tuple(int(value[i:i + length // 3], 16)/255 for i in range(0, length, length // 3))

IMAGE_RATIO=os.environ.get("IMAGE_RATIO", default=1.6)

CACHE_COORDINATES="cache/coordinates.json"

IMAGE_FOLDER=os.environ.get("IMAGE_FOLDER", default="/images")
EXPORT_IMAGE=os.environ.get("EXPORT_IMAGE", default="/export/map.png")

# Image config
BG_COLOR=hex_to_rgb(os.environ.get("BG_COLOR", default="#000000"))
FG_COLOR=hex_to_rgb(os.environ.get("FG_COLOR", default="#FFFFFF"))
MARKER_COLOR=hex_to_rgb(os.environ.get("MARKER_COLOR", default="#FF0000"))

COAST_WIDTH = os.environ.get("COAST_WIDTH", default=4)
BORDERS_WIDTH = os.environ.get("BORDERS_WIDTH", default=2)
MARKER_WIDTH= os.environ.get("MARKER_WIDTH",default=15)

def main():
    """ main function """
    # create a plot object
    photos = list(get_all_photos(IMAGE_FOLDER))
    print("Total photos: ", len(photos))

    coords = list(get_all_coordinates(photos))
    print(f"Photos with GPS info: {len(coords)} ({int(len(coords)/len(photos)*100)}%)")

    plt.figure(figsize=(IMAGE_RATIO * 100, 100 / IMAGE_RATIO))

    plot = plt.axes(projection=crs.PlateCarree())

    plot.set_facecolor(BG_COLOR)

    plot.add_feature(
        feature.COASTLINE.with_scale('10m'),
        color=FG_COLOR,
        linewidth=COAST_WIDTH)

    plot.add_feature(
        feature.BORDERS.with_scale('10m'),
        linestyle=':',
        color=FG_COLOR,
        linewidth=BORDERS_WIDTH)

    plot.set_extent(get_curr_extent(coords, IMAGE_RATIO), crs=crs.PlateCarree())

    for lat, long in coords:
        plot.plot(long, lat, markersize=MARKER_WIDTH, marker='o', color=MARKER_COLOR)

    # save image
    plt.savefig(EXPORT_IMAGE, bbox_inches = 'tight', pad_inches = 0)


def get_all_photos(folder: str) -> Generator[str, None, None]:
    """return all photos in a folder recursively"""
    for currentpath, _, files in os.walk(folder):
        for file in files:
            _, extension = os.path.splitext(file)
            if extension in ['.jpeg', '.jpg', '.png']:
                yield os.path.join(currentpath, file)

def decimal_coords(coords: Tuple[int, int, int], ref: str) -> float:
    """convert from coords tuples to deciaml coords"""
    decimal_degrees = coords[0] + coords[1] / 60 + coords[2] / 3600
    if ref in ['S', 'W']:
        decimal_degrees = -decimal_degrees
    return float(decimal_degrees)


def get_all_coordinates(photos: Iterable[str]) -> Generator[Tuple[float,float], None, None]:
    """get the coordinates of all photos inside a folder recursively"""
    try:
        with open(CACHE_COORDINATES, "r", encoding="utf-8") as file:
            coordinates_cache = json.load(file)
    except (IOError, json.JSONDecodeError):
        coordinates_cache = {}

    for photo in photos:
        cache = coordinates_cache.get(photo)

        if cache:
            yield cache
            continue

        img=Image.open(photo)

        gps_info={}
        for key, value in img.getexif().get_ifd(IFD.GPSInfo).items():
            geo_tag=GPSTAGS.get(key)
            gps_info[geo_tag]=value

        try:
            convert_coords = (decimal_coords(gps_info['GPSLatitude'], gps_info['GPSLatitudeRef']),
            decimal_coords(gps_info['GPSLongitude'], gps_info['GPSLongitudeRef']))
            coordinates_cache[photo] = convert_coords
            yield convert_coords
        except KeyError:
            continue

    with open(CACHE_COORDINATES, "w", encoding="utf-8") as file:
        json.dump(coordinates_cache, file)


def get_curr_extent(coords: Iterable[Tuple[float, float]], ratio: float) -> Tuple[float, float, float, float]:
    """ compute a border arround a list of coords respecting a specific ratio"""
    # calculate min and max
    lats, longs = zip(*coords)
    minlat = min(lats)
    maxlat = max(lats)
    minlong = min(longs)
    maxlong = max(longs)

    # calculta center coordinates
    centerlat = (minlat + maxlat)/2
    centerlong = (minlong + maxlong)/2

    # calculate side vector
    veclat = abs(maxlat - minlat)
    veclong = abs(maxlong - minlong)

    if centerlat + veclat > 90 or centerlat - veclat < -90 :
        veclat = veclat / 1.9

    if centerlong + veclong > 180 or centerlong - veclong < -180 :
        veclong = veclong / 1.9

    # set ratio
    if veclat < veclong / ratio:
        veclat = veclong / ratio
    elif veclong < veclat * ratio:
        veclong = veclat * ratio

    # calculate extent
    minlat = centerlat - veclat
    maxlat = centerlat + veclat
    minlong = centerlong - veclong
    maxlong = centerlong + veclong

    # fix out of bounds extent
    if maxlong > 180:
        minlong -= maxlong - 180
        maxlong = 180

    if minlong < -180:
        maxlong -= minlong + 180
        minlong = -180

    if maxlat > 90:
        minlat -= maxlat - 90
        maxlat = 90

    if minlat < -90:
        maxlat -= minlat + 90
        minlat = -90

    return (minlong, maxlong, minlat, maxlat)

main()
